---
# NOTE: use either this pre-defined 'network_interface' (IP of octalfutures.com domainname)
# or grp and vpc_subnet

- name: install and start octalfutures instance
  hosts: localhost
  gather_facts: false
  vars:
    image: ami-69b9941e 
    instance_type: t2.micro
    region: eu-west-1
    # daniel (orig)
    #key_name: daniel-ec2
    #network_interface: eni-9bbc8bfc
    #group_id: sg-6a70ac0e
    #vpc_subnet_id: subnet-1ac19a7f
    # frankc (new)
    key_name: frank-ec2
    network_interface:  eni-7a0a8306
    group_id:  sg-824105f5
    vpc_subnet_id: subnet-0a267d6f

  tasks:
    - name: Launch OctalFutures instance
      ec2:
        #group_id: "{{ group_id }}"
        #vpc_subnet_id: "{{ vpc_subnet_id }}"
        #assign_public_ip: yes
        network_interface: "{{network_interface}}"
        image: "{{ image }}"
        instance_type: "{{ instance_type }}"
        key_name: "{{ key_name }}"
        wait: True
        region: "{{ region }}"
        exact_count: 1
        count_tag:
            octalclass: octalserver
        instance_tags:
            octalclass: octalserver
      register: ec2_launch_result

    - name: Add new instance(s) to host group
      add_host: hostname={{ item.public_ip }} groupname=launched
      with_items: "{{ ec2_launch_result.instances |default([])}}"

    - name: Wait for any new SSHds to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: "{{ ec2_launch_result.instances |default([])}}"

- name: Configure OctalFutures instance
  hosts: octalservers
  become: True
  gather_facts: True
  roles:
    - octalserver

